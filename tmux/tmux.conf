set -g default-terminal "screen-256color"
# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Map prefix-K to clear stdout
bind k if-shell -F "#{alternate_on}" "#" "send-keys -R; clear-history; send-keys C-l"

# Start window numbering at 1
set -g base-index 1
set -g renumber-windows on

# Enable mouse
set -g mouse on

# vi mode
setw -g mode-keys vi

#hsplit
unbind '"'
bind \\ split-window -h -c "#{pane_current_path}"

#vsplit
unbind %
bind - split-window -v -c "#{pane_current_path}"

# Break pane and detach to a window
bind b break-pane -d

# Prompted merge-pane
bind m command-prompt -p "Merge pane from: "  "join-pane -h -s '%%'"

# Break the current shell path into a new session
bind C-b send-keys 'tat && exit' 'C-m'

# Easily change a pane (targeted by pane number) with the current pane
bind x display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# Shift arrow to switch windows
bind -n S-Right  previous-window
bind -n S-Left next-window

# Use Alt-<h,j,k,l>keys to switch panes
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# TODO: Add resize with HJKL keys
# easy resizing of panes
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# Status bar configuration
set -g status-left-length 50
set -g status-right "$wg_is_keys_off | $wg_user_host |  #(date '+%a, %b %d - %I:%M') "

# Easy config reload
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."


# ===============================================
# Some user defined variables
# ===============================================

wg_user_host="#H"

# ===============================================
# ===   Nesting local and remote sessions     ===
# ===============================================

# Hide status bar on demand
unbind F10
bind -n F10 if -F '#{s/off//:status}' 'set status off' 'set status on'

# Follow this blog to copy to clipboard from tmux if it is not supported out of the box
# Iterm2 supports it out of the box, so no need to use it for now.
# https://thoughtbot.com/blog/tmux-copy-paste-on-os-x-a-better-future

bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
      refresh-client -S \;\

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    set -u status-style \;\
    set -u window-status-current-style \;\
    set -u window-status-current-format \;\
    refresh-client -S

wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off'  ] && echo 'OFF')#[default]"

